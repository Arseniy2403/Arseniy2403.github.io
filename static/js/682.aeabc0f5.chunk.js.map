{"version":3,"file":"static/js/682.aeabc0f5.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ErrorGif from './error.gif';\n\nexport default function ErrorMessage() {\n    return (\n        <img style={{\n            display: 'block',\n            width: '250px',\n            height: '250px',\n            objectFit: 'contain',\n            margin: '0 auto'\n        }} src={ErrorGif} alt=\"Error Gif\" />\n    )\n}","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport LoadingSpinner from \"../spinner/LoadingSpinner\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getMarvelData} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\n\n        getMarvelData('comics', 8, offset)\n            .then(onComicsListLoaded);\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setOffset(offset => offset + 8);\n        setNewItemsLoading(false);\n        setComicsEnded(ended);\n    }\n\n    const renderItems = (arr) => {\n        const items = arr.map((item, i) => {\n            const {title, price, url, thumbnail, id} = item;\n\n            return (\n                <li key={i} className=\"comics__item\">\n                    <Link to={`/marvel_info/comics/${id}`}>\n                        <img src={thumbnail} alt={title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{title}</div>\n                        <div className=\"comics__item-price\">{price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                    {items}\n                </ul>\n        )\n    }\n\n    const itemsList = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemsLoading ? <LoadingSpinner/> : null;\n\n    return (\n        <>\n            <AppBanner/>\n            <div className=\"comics__list\">\n                    {itemsList}\n                    {spinner}\n                    {errorMessage}\n                <button className=\"button button__main button__long\"\n                        disabled={newItemsLoading}\n                        style={{'display': comicsEnded ? 'none' : 'block'}}\n                        onClick={() => onRequest(offset, false)}>\n                    <div className=\"inner\">Load More</div>\n                </button>\n            </div>\n        </>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\n\nimport ComicsList from \"../comicsList/ComicsList\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics page</title>\n            </Helmet>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=df45cf660f835fae11e3961d7b9575b8';\n    const _baseOffset = 215;\n\n    const {loading, request, error, clearError} = useHttp();\n\n    const getMarvelData = async (data, limit, offset = _baseOffset) => {\n        const res = await request(`${_apiBase}${data}?limit=${limit}&offset=${offset}&${_apiKey}`);\n        \n        if (data === 'characters') {\n            return await res.data.results.map(_transformCharacter);\n        }\n\n        return await res.data.results.map(_transformComics);\n    }\n\n    const getSingleMarvelData = async (data, id) => {\n        const res = await request(`${_apiBase}${data}/${id}?${_apiKey}`);\n        \n        if (data === 'characters') {\n            return _transformCharacter(res.data.results[0]);\n        }\n\n        return _transformComics(res.data.results[0]);\n    }\n\n    const findCharByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\n        \n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        let description = char.description;\n\n        if (description.length <= 0) {\n            description = 'There is no information about this character';\n        }\n\n        if (description.length > 150) {\n            description = description.slice(0, 150) + '...';\n        }\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (item) => {\n        return {\n            id: item.id,\n            title: item.title,\n            description: item.description || \"There is no description\",\n            pageCount: item.pageCount ? `${item.pageCount} p.` : \"No information about the number of pages\", \n            price: item.prices[0].price === 0 ? 'NOT AVAILABLE' : (item.prices[0].price + '$'),\n            language: item.textObjects.language || \"en-us\",\n            thumbnail: item.thumbnail.path + '.' + item.thumbnail.extension,\n            url: item.urls[0].url\n        }\n    }\n\n    const checkAvailableImage = (path) => {\n        let imageStyle = {\n            objectFit : 'fill'\n        };\n\n        if(/image_not_available/gi.test(path)) {\n            imageStyle.objectFit = 'unset';\n        }\n\n        return imageStyle;\n    }\n\n    return {loading, error, getMarvelData, getSingleMarvelData, checkAvailableImage, clearError, findCharByName}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setloading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type' : 'application/json'}) => {\n\n        setloading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.state}`);\n            }\n            const data = await response.json();\n\n            setloading(false);\n            \n            if (data.data.results.length === 0) {\n                throw new Error(`No matches found`);\n            }\n\n            return data;\n        } catch (error) {\n            setloading(false);\n            setError(error.message);\n\n            throw error;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => {\n        setError(null);\n    }, [])\n\n    return {loading, error, request, clearError};\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","ErrorGif","_useState","useState","_useState2","_slicedToArray","comicsList","setComicsList","_useState3","_useState4","newItemsLoading","setNewItemsLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","comicsEnded","setComicsEnded","_useMarvelService","useMarvelService","loading","error","getMarvelData","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","concat","_toConsumableArray","itemsList","arr","items","map","item","i","title","price","thumbnail","url","id","Link","to","renderItems","errorMessage","spinner","LoadingSpinner","_Fragment","AppBanner","disabled","onClick","Helmet","name","content","ComicsList","_apiBase","_apiKey","_useHttp","setloading","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","undefined","fetch","sent","ok","Error","state","json","results","abrupt","t0","message","stop","_x","apply","clearError","useHttp","limit","res","_transformCharacter","_transformComics","_x2","getSingleMarvelData","_ref2","_callee2","_context2","_x3","_x4","findCharByName","_ref3","_callee3","_context3","_x5","char","description","slice","path","extension","homepage","urls","wiki","comics","pageCount","prices","language","textObjects","checkAvailableImage","imageStyle","test","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}