{"version":3,"file":"static/js/675.6df7c4f3.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import ErrorGif from './error.gif';\r\n\r\nexport default function ErrorMessage() {\r\n    return (\r\n        <img style={{\r\n            display: 'block',\r\n            width: '250px',\r\n            height: '250px',\r\n            objectFit: 'contain',\r\n            margin: '0 auto'\r\n        }} src={ErrorGif} alt=\"Error Gif\" />\r\n    )\r\n}","import { useEffect } from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport LoadingSpinner from '../spinner/LoadingSpinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({});\r\n\r\n    const {loading, error, getSingleMarvelData, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        \r\n        clearError();\r\n        getSingleMarvelData('characters', id)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [])\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <LoadingSpinner/> : null;\r\n    const content = !(loading || error) ? <View char={char}/> : null;\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\"\r\n                        onClick={updateChar}\r\n                        >\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {checkAvailableImage} = useMarvelService();\r\n    const {name, description, homepage, wiki, thumbnail} = char;\r\n\r\n    const imageStyle = checkAvailableImage(thumbnail);\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imageStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect, useRef, useTransition } from 'react';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Transition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport LoadingSpinner from '../spinner/LoadingSpinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst duration = 500;\r\n\r\nconst defaultStyle = {\r\n  transition: `opacity ${duration}ms ease-in-out`,\r\n  opacity: 0,\r\n}\r\n\r\nconst transitionStyles = {\r\n  entering: { opacity: 1 },\r\n  entered:  { opacity: 1 },\r\n  exiting:  { opacity: 0 },\r\n  exited:  { opacity: 0 },\r\n};\r\n\r\nconst CharList = ({onCharSelected}) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\r\n    const [offset, setOffset] = useState(215);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     const onScrollRequest = () => {\r\n    //         if((document.documentElement.clientHeight + window.scrollY) >= document.documentElement.scrollHeight - 1 && !newItemsLoading) {\r\n    //             onRequest(offset, false);\r\n    //         }\r\n    //     }\r\n    //     console.log('load')\r\n        \r\n    //     window.addEventListener('scroll', onScrollRequest);\r\n        \r\n    //     return () => {\r\n    //         window.removeEventListener('scroll', onScrollRequest)\r\n    //     };\r\n    // }, [newItemsLoading, offset])\r\n\r\n    const {loading, error, getMarvelData, checkAvailableImage} = useMarvelService();\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\r\n\r\n        getMarvelData('characters', 9, offset)\r\n            .then(onCharListLoaded);\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setOffset(offset => offset + 9);\r\n        setNewItemsLoading(false);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    const itemsRef = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemsRef.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemsRef.current[id].classList.add('char__item_selected');\r\n        itemsRef.current[id].focus()\r\n    }\r\n\r\n    const renderItems = (arr) => {\r\n        const items = arr.map((char, i) => {\r\n            const {name, thumbnail, id} = char;\r\n            \r\n            const imageStyle = checkAvailableImage(thumbnail);\r\n\r\n            return (\r\n                <Transition key={id}\r\n                            timeout={duration}\r\n                            mountOnEnter>\r\n                    {\r\n                        state => (\r\n                            <li ref={el => itemsRef.current[i] = el}\r\n                                tabIndex={0}\r\n                                className=\"char__item\"\r\n                                onClick={() => {\r\n                                        onCharSelected(id);\r\n                                        focusOnItem(i)\r\n                                    }}\r\n                                // onFocus={() => {\r\n                                //     onCharSelected(id);\r\n                                // }}\r\n                                onKeyPress={(e) => {\r\n                                    if (e.key === ' ' || e.key === \"Enter\") {\r\n                                        onCharSelected(id);\r\n                                        focusOnItem(i);\r\n                                    }\r\n                                }}\r\n                                style={{\r\n                                    ...defaultStyle,\r\n                                    ...transitionStyles[state]\r\n                                }}\r\n                                >\r\n                                <img src={thumbnail} alt={name} style={imageStyle}/>\r\n                                <div className=\"char__name\">{name}</div>\r\n                            </li>\r\n                        )\r\n                    }\r\n                </Transition>\r\n            )\r\n        })\r\n\r\n        return (\r\n            \r\n                <ul className=\"char__grid\">\r\n                    <TransitionGroup component={null}>\r\n                        {items}\r\n                    </TransitionGroup>\r\n                </ul>\r\n        )\r\n    }\r\n\r\n    const itemsList = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemsLoading ? <LoadingSpinner/> : null;\r\n    // const content = !(loading || error) ? itemsList : null;\r\n    \r\n    return (\r\n        <div className=\"char__list\">\r\n                {itemsList}\r\n                {spinner}\r\n                {errorMessage}\r\n            <button className=\"button button__main button__long\"\r\n                    disabled={newItemsLoading}\r\n                    style={{'display': charEnded ? 'none' : 'block'}}\r\n                    onClick={() => onRequest(offset, false)}>\r\n                <div className=\"inner\">Load More</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport LoadingSpinner from '../spinner/LoadingSpinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = ({charId}) =>{\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {loading, error, getSingleMarvelData, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [charId]);\r\n\r\n    const updateChar = () => {\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        \r\n        getSingleMarvelData('characters', charId)\r\n            .then(setChar);\r\n    }\r\n\r\n    const skeleton =  char || loading || error ? null : <Skeleton/>;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <LoadingSpinner/> : null;\r\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {skeleton}\r\n            {errorMessage}\r\n            {content}\r\n            {spinner}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\r\n    const {checkAvailableImage} = useMarvelService();\r\n    const imageStyle = checkAvailableImage(thumbnail);\r\n    const comicsList = comics.map((item, i) => {\r\n        const urlParts = item.resourceURI.split('/');\r\n        const id = urlParts[urlParts.length - 1];\r\n\r\n        if (i > 9) {\r\n            return;\r\n        }\r\n        return (\r\n            <li key={i} className=\"char__comics-item\">\r\n                    <Link to={`/comics/${id}`}>{item.name}</Link>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imageStyle}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comicsList.length === 0 ? 'Comics not found' : comicsList}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=df45cf660f835fae11e3961d7b9575b8';\r\n    const _baseOffset = 215;\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const getMarvelData = async (data, limit, offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}${data}?limit=${limit}&offset=${offset}&${_apiKey}`);\r\n        \r\n        if (data === 'characters') {\r\n            return await res.data.results.map(_transformCharacter);\r\n        }\r\n\r\n        return await res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getSingleMarvelData = async (data, id) => {\r\n        const res = await request(`${_apiBase}${data}/${id}?${_apiKey}`);\r\n        \r\n        if (data === 'characters') {\r\n            return _transformCharacter(res.data.results[0]);\r\n        }\r\n\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        let description = char.description;\r\n\r\n        if (description.length <= 0) {\r\n            description = 'There is no information about this character';\r\n        }\r\n\r\n        if (description.length > 150) {\r\n            description = description.slice(0, 150) + '...';\r\n        }\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (item) => {\r\n        return {\r\n            id: item.id,\r\n            title: item.title,\r\n            description: item.description || \"There is no description\",\r\n            pageCount: item.pageCount ? `${item.pageCount} p.` : \"No information about the number of pages\", \r\n            price: item.prices[0].price === 0 ? 'NOT AVAILABLE' : (item.prices[0].price + '$'),\r\n            language: item.textObjects.language || \"en-us\",\r\n            thumbnail: item.thumbnail.path + '.' + item.thumbnail.extension,\r\n            url: item.urls[0].url\r\n        }\r\n    }\r\n\r\n    const checkAvailableImage = (path) => {\r\n        let imageStyle = {\r\n            objectFit : 'fill'\r\n        };\r\n\r\n        if(/image_not_available/gi.test(path)) {\r\n            imageStyle.objectFit = 'unset';\r\n        }\r\n\r\n        return imageStyle;\r\n    }\r\n\r\n    return {loading, error, getMarvelData, getSingleMarvelData, checkAvailableImage, clearError}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setloading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type' : 'application/json'}) => {\r\n\r\n        setloading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.state}`);\r\n            }\r\n            const data = await response.json();\r\n\r\n            setloading(false);\r\n\r\n            return data;\r\n        } catch (error) {\r\n            setloading(false);\r\n            setError(error.message);\r\n\r\n            throw error;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n    }, [])\r\n\r\n    return {loading, error, request, clearError};\r\n}"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","ErrorGif","alt","View","_ref","char","checkAvailableImage","useMarvelService","name","description","homepage","wiki","thumbnail","imageStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","loading","error","getSingleMarvelData","clearError","onCharLoaded","updateChar","id","Math","floor","random","then","useEffect","errorMessage","spinner","LoadingSpinner","content","onClick","mjolnir","defaultStyle","transition","concat","opacity","transitionStyles","entering","entered","exiting","exited","onCharSelected","charList","setCharList","_useState3","_useState4","newItemsLoading","setNewItemsLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","getMarvelData","initial","onCharListLoaded","newCharList","ended","length","_toConsumableArray","itemsRef","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","itemsList","arr","items","map","i","Transition","timeout","mountOnEnter","state","ref","el","tabIndex","onKeyPress","e","key","_objectSpread","TransitionGroup","component","renderItems","disabled","_Fragment","_ref2","comics","comicsList","urlParts","resourceURI","split","Link","to","charId","skeleton","Skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","_createClass","value","errorInfo","console","log","this","setState","props","Component","selectedChar","RandomChar","CharList","CharInfo","decoration","_apiBase","_apiKey","_useHttp","setloading","setError","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","Error","json","abrupt","t0","message","stop","_x","useHttp","limit","res","results","_transformCharacter","_transformComics","_x2","_callee2","_context2","_x3","_x4","slice","path","extension","urls","title","pageCount","price","prices","language","textObjects","test"],"sourceRoot":""}