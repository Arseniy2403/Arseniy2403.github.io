{"version":3,"file":"static/js/449.4a0e026e.chunk.js","mappings":"sMAEe,SAASA,IACpB,OACIC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CACRC,QAAS,QACTC,MAAO,QACPC,OAAQ,QACRC,UAAW,UACXC,OAAQ,UACTC,IAAKC,EAAUC,IAAI,aAE9B,C,kICOA,EAjBiB,WACb,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIZ,EAAAA,EAAAA,KAAA,KAAGa,UAAU,eAAcD,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,WAAUD,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,yBAAwBD,SAAA,EACnCZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,4BACfb,EAAAA,EAAAA,KAAA,OAAKa,UAAU,6BAEnBb,EAAAA,EAAAA,KAAA,OAAKa,UAAU,2BACfb,EAAAA,EAAAA,KAAA,OAAKa,UAAU,2BACfb,EAAAA,EAAAA,KAAA,OAAKa,UAAU,+BAI/B,E,UCEA,EAfmB,SAACC,EAASC,EAAWC,GACpC,OAAOF,GACH,IAAK,UACD,OAAOd,EAAAA,EAAAA,KAACiB,EAAQ,IACpB,IAAK,UACD,OAAOjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAc,IAC1B,IAAK,UACD,OAAOlB,EAAAA,EAAAA,KAACe,EAAS,CAACC,KAAMA,IAC5B,IAAK,QACD,OAAOhB,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IACxB,QACI,MAAM,IAAIoB,MAAM,4BAE5B,E,sDCqCMC,EAAO,SAAHC,GAAgB,IAAXL,EAAIK,EAAJL,KACJM,GAAuBC,EAAAA,EAAAA,KAAvBD,oBACAE,EAAgDR,EAAhDQ,KAAMC,EAA0CT,EAA1CS,YAAaC,EAA6BV,EAA7BU,SAAUC,EAAmBX,EAAnBW,KAAMC,EAAaZ,EAAbY,UAEpCC,EAAaP,EAAoBM,GAEvC,OACIlB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oBAAmBD,SAAA,EAC9BZ,EAAAA,EAAAA,KAAA,OAAKO,IAAKqB,EAAWnB,IAAI,mBAAmBI,UAAU,kBAAkBZ,MAAO4B,KAC/EnB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mBAAkBD,SAAA,EAC7BZ,EAAAA,EAAAA,KAAA,KAAGa,UAAU,mBAAkBD,SAAEY,KACjCxB,EAAAA,EAAAA,KAAA,KAAGa,UAAU,oBAAmBD,SAC3Ba,KAELf,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mBAAkBD,SAAA,EAC7BZ,EAAAA,EAAAA,KAAA,KAAG8B,KAAMJ,EAAUb,UAAU,sBAAqBD,UAC9CZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,QAAOD,SAAC,gBAE3BZ,EAAAA,EAAAA,KAAA,KAAG8B,KAAMH,EAAMd,UAAU,2BAA0BD,UAC/CZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,QAAOD,SAAC,mBAM/C,EAEA,EAxEmB,WACf,IAAAmB,GAAwBC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAEpBI,GAA+Dd,EAAAA,EAAAA,KAAxDT,EAAOuB,EAAPvB,QAASwB,EAAUD,EAAVC,WAAYC,EAAmBF,EAAnBE,oBAAqBC,EAAUH,EAAVG,WAE3CC,EAAe,SAACN,GAClBC,EAAQD,EACZ,EAEMO,EAAa,WACf,IAAMC,EAAKC,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAE5DN,IACAD,EAAoB,aAAcI,GAC7BI,KAAKN,GACLM,MAAK,kBAAMT,EAAW,UAAU,GACzC,EAOA,OALAU,EAAAA,EAAAA,YAAU,WACNN,GAEJ,GAAG,KAGChC,EAAAA,EAAAA,MAAA,OAAKG,UAAU,aAAYD,SAAA,CACtBqC,EAAWnC,EAASM,EAAMe,IAC3BzB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,qBAAoBD,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,KAAGG,UAAU,oBAAmBD,SAAA,CAAC,+BACFZ,EAAAA,EAAAA,KAAA,SAAK,6CAGpCA,EAAAA,EAAAA,KAAA,KAAGa,UAAU,oBAAmBD,SAAC,2BAGjCZ,EAAAA,EAAAA,KAAA,UAAQa,UAAU,sBACVqC,QAASR,EAAW9B,UAExBZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,QAAOD,SAAC,cAE3BZ,EAAAA,EAAAA,KAAA,OAAKO,IAAK4C,EAAS1C,IAAI,UAAUI,UAAU,gCAI3D,E,UCsFA,EAjHiB,SAAHQ,GAA0B,IAArB+B,EAAc/B,EAAd+B,eACfrB,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCsB,EAAQpB,EAAA,GAAEqB,EAAWrB,EAAA,GAC5BsB,GAA8CvB,EAAAA,EAAAA,WAAS,GAAMwB,GAAAtB,EAAAA,EAAAA,GAAAqB,EAAA,GAAtDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAA4B3B,EAAAA,EAAAA,UAAS,KAAI4B,GAAA1B,EAAAA,EAAAA,GAAAyB,EAAA,GAAlCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAkC/B,EAAAA,EAAAA,WAAS,GAAMgC,GAAA9B,EAAAA,EAAAA,GAAA6B,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9B3B,GAAkEd,EAAAA,EAAAA,KAA3DT,EAAOuB,EAAPvB,QAASwB,EAAUD,EAAVC,WAAY6B,EAAa9B,EAAb8B,cAAe7C,EAAmBe,EAAnBf,qBAE3C0B,EAAAA,EAAAA,YAAU,WACNoB,EAAUP,GAAQ,EAEtB,GAAG,IAiBH,IAAMO,EAAY,SAACP,EAAQQ,GACbX,GAAVW,GAEAF,EAAc,aAAc,EAAGN,GAC1Bd,KAAKuB,GACLvB,MAAK,kBAAMT,EAAW,UAAU,GACzC,EAEMgC,EAAmB,SAACC,GACtB,IAAIC,GAAQ,EACRD,EAAYE,OAAS,IACrBD,GAAQ,GAGZlB,GAAY,SAAAD,GAAQ,SAAAqB,QAAAC,EAAAA,EAAAA,GAAQtB,IAAQsB,EAAAA,EAAAA,GAAKJ,GAAW,IACpDT,GAAU,SAAAD,GAAM,OAAIA,EAAS,CAAC,IAC9BH,GAAmB,GACnBQ,EAAaM,EACjB,EAEMI,GAAWC,EAAAA,EAAAA,QAAO,IAElBC,EAAc,SAACnC,GACjBiC,EAASG,QAAQC,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,UAAUC,OAAO,sBAAsB,IAC7EP,EAASG,QAAQpC,GAAIuC,UAAUE,IAAI,uBACnCR,EAASG,QAAQpC,GAAI0C,OACzB,EAwCMC,GAAQC,EAAAA,EAAAA,UAAQ,kBA7GP,SAACzE,EAASC,EAAWyE,GACpC,OAAO1E,GACH,IAAK,UACD,OAAOd,EAAAA,EAAAA,KAACkB,EAAAA,EAAc,IAC1B,IAAK,UACD,OAAOsE,GAAaxF,EAAAA,EAAAA,KAACe,EAAS,KAAKf,EAAAA,EAAAA,KAACkB,EAAAA,EAAc,IACtD,IAAK,UACD,OAAOlB,EAAAA,EAAAA,KAACe,EAAS,IACrB,IAAK,QACD,OAAOf,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IACxB,QACI,MAAM,IAAIoB,MAAM,4BAE5B,CAgGgC8B,CAAWnC,GAAS,kBAtC5B,SAAC2E,GACjB,IAAMC,EAAQD,EAAIE,KAAI,SAACxD,EAAMyD,GACzB,IAAOpE,EAAuBW,EAAvBX,KAAMI,EAAiBO,EAAjBP,UAAWe,EAAMR,EAANQ,GAElBd,EAAaP,EAAoBM,GAEvC,OACIlB,EAAAA,EAAAA,MAAA,MACImF,IAAK,SAAAC,GAAE,OAAIlB,EAASG,QAAQa,GAAKE,CAAE,EACnCC,SAAU,EACVlF,UAAU,aACVqC,QAAS,WACDE,EAAeT,GACfmC,EAAYc,EAChB,EAIJI,WAAY,SAACC,GACK,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,MACnB9C,EAAeT,GACfmC,EAAYc,GAEpB,EAAEhF,SAAA,EAEFZ,EAAAA,EAAAA,KAAA,OAAKO,IAAKqB,EAAWnB,IAAKe,EAAMvB,MAAO4B,KACvC7B,EAAAA,EAAAA,KAAA,OAAKa,UAAU,aAAYD,SAAEY,MAnBxBoE,EAsBjB,IAEA,OACQ5F,EAAAA,EAAAA,KAAA,MAAIa,UAAU,aAAYD,SACjB8E,GAGrB,CAEsDS,CAAY9C,EAAS,GAAEI,EAAgB,GAAE,CAACJ,IAEhG,OACI3C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,aAAYD,SAAA,CAClB0E,GACLtF,EAAAA,EAAAA,KAAA,UAAQa,UAAU,mCACVuF,SAAU3C,EACVxD,MAAO,CAAC,QAAWgE,EAAY,OAAS,SACxCf,QAAS,kBAAMkB,EAAUP,GAAQ,EAAM,EAACjD,UAC5CZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,QAAOD,SAAC,kBAIvC,E,UChGMQ,EAAO,SAAHiF,GAAgB,IAAXrF,EAAIqF,EAAJrF,KACJQ,EAAwDR,EAAxDQ,KAAMC,EAAkDT,EAAlDS,YAAaG,EAAqCZ,EAArCY,UAAWF,EAA0BV,EAA1BU,SAAUC,EAAgBX,EAAhBW,KAAM2E,EAAUtF,EAAVsF,OAE/CzE,GAAaP,GADWC,EAAAA,EAAAA,KAAvBD,qBACgCM,GACjC2E,EAAaD,EAAOX,KAAI,SAACV,EAAMW,GACjC,IAAMY,EAAWvB,EAAKwB,YAAYC,MAAM,KAClC/D,EAAK6D,EAASA,EAAS/B,OAAS,GAEtC,KAAImB,EAAI,GAGR,OACI5F,EAAAA,EAAAA,KAAA,MAAYa,UAAU,oBAAmBD,UACjCZ,EAAAA,EAAAA,KAAC2G,EAAAA,GAAI,CAACC,GAAE,uBAAAlC,OAAyB/B,GAAK/B,SAAEqE,EAAKzD,QAD5CoE,EAIjB,IAEA,OACIlF,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,eAAcD,SAAA,EACzBZ,EAAAA,EAAAA,KAAA,OAAKO,IAAKqB,EAAWnB,IAAKe,EAAMvB,MAAO4B,KACvCnB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,kBAAiBD,SAAEY,KAClCd,EAAAA,EAAAA,MAAA,OAAKG,UAAU,aAAYD,SAAA,EACvBZ,EAAAA,EAAAA,KAAA,KAAG8B,KAAMJ,EAAUb,UAAU,sBAAqBD,UAC9CZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,QAAOD,SAAC,gBAE3BZ,EAAAA,EAAAA,KAAA,KAAG8B,KAAMH,EAAMd,UAAU,2BAA0BD,UAC/CZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,QAAOD,SAAC,qBAKvCZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,cAAaD,SACvBa,KAELzB,EAAAA,EAAAA,KAAA,OAAKa,UAAU,eAAcD,SAAC,aAC9BZ,EAAAA,EAAAA,KAAA,MAAIa,UAAU,oBAAmBD,SACN,IAAtB2F,EAAW9B,OAAe,mBAAqB8B,MAIhE,EAMA,EA5EiB,SAAHlF,GAAiB,IAAZwF,EAAMxF,EAANwF,OACf9E,GAAwBC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAEpBI,GAA+Dd,EAAAA,EAAAA,KAAxDT,EAAOuB,EAAPvB,QAASyB,EAAmBF,EAAnBE,oBAAqBC,EAAUH,EAAVG,WAAYF,EAAUD,EAAVC,YAEjDU,EAAAA,EAAAA,YAAU,WACNN,GACJ,GAAG,CAACmE,IAEJ,IAAMnE,EAAa,WACVmE,IAGLrE,IAEAD,EAAoB,aAAcsE,GAC7B9D,KAAKX,GACLW,MAAK,kBAAMT,EAAW,UAAU,IACzC,EAEA,OACItC,EAAAA,EAAAA,KAAA,OAAKa,UAAU,aAAYD,SACtBqC,EAAWnC,EAASM,EAAMe,IAGvC,E,oBCzBMc,EAAa,SAACnC,EAASC,EAAWC,GACpC,OAAOF,GACH,IAAK,UAEL,IAAK,UACD,OAAO,KACX,IAAK,UAEL,IAAK,QACD,OAAOd,EAAAA,EAAAA,KAACe,EAAS,CAACC,KAAMA,EAAMF,QAASA,IAC3C,QACI,MAAM,IAAIK,MAAM,4BAE5B,EAiDMC,EAAO,SAAHC,GAAyB,IAApBL,EAAIK,EAAJL,KAAMF,EAAOO,EAAPP,QACjB,OAAKE,GAAoB,UAAZF,GAQLJ,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,eAAcD,SAAA,mBAAA8D,OAAqB1D,EAAKQ,KAAI,aAC3DxB,EAAAA,EAAAA,KAAC8G,EAAY,CAACtF,KAAMR,EAAKQ,WAR7BxB,EAAAA,EAAAA,KAAAW,EAAAA,SAAA,CAAAC,UACIZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,cAAaD,SAAC,+DAW7C,EAEMkG,EAAe,SAAHT,GAAgB,IAAX7E,EAAI6E,EAAJ7E,KACnB,OACIxB,EAAAA,EAAAA,KAAC2G,EAAAA,GAAI,CAACC,GAAE,2BAAAlC,OAA6BlD,GACjCX,UAAU,2BAA0BD,UAC5BZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,QAAOD,SAAC,aAG3C,EAEA,EAzEuB,WACnB,IAAAmB,GAAwBC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0Dd,EAAAA,EAAAA,KAAnDwF,EAAc1E,EAAd0E,eAAgBvE,EAAUH,EAAVG,WAAY1B,EAAOuB,EAAPvB,QAASwB,EAAUD,EAAVC,WAY5C,OACItC,EAAAA,EAAAA,KAACgH,EAAAA,GAAM,CACHC,cAAe,CACXzF,KAAM,IAEV0F,iBAAkBC,EAAAA,GAAW,CACzB3F,KAAM2F,EAAAA,KAAaC,IAAI,EAAG,yBAAyBC,SAAS,4BAEhEC,SAAU,SAAAC,GAAM,OAlBJ/F,EAkBmB+F,EAAO/F,KAjB1CgB,IACAJ,GAAQ,SAAAD,GAAI,OAAI,IAAI,SAEpB4E,EAAevF,GACVuB,MAAK,SAAA/B,GAAI,OAAIoB,GAAQ,SAAAD,GAAI,OAAInB,CAAI,GAAC,IAClC+B,MAAK,kBAAMT,EAAW,UAAU,IANtB,IAACd,CAkB+B,EAACZ,UAE5CZ,EAAAA,EAAAA,KAACwH,EAAAA,GAAI,CAAA5G,UACDF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWD,SAAA,EACtBZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,cAAaD,SAAC,kCAG7BF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wBAAuBD,SAAA,EAClCZ,EAAAA,EAAAA,KAACyH,EAAAA,GAAK,CACFjG,KAAK,OACLkG,YAAY,aACZ7G,UAAU,iBAEdb,EAAAA,EAAAA,KAAA,UAAQ2H,KAAK,SAAS9G,UAAU,sBAAqBuF,SAAsB,YAAZtF,EAAsBF,UACjFZ,EAAAA,EAAAA,KAAA,OAAKa,UAAU,QAAOD,SAAC,YAE3BZ,EAAAA,EAAAA,KAAC4H,EAAAA,GAAW,CAACpG,KAAK,OAAOqG,UAAU,MAAMhH,UAAU,gBAClDoC,EAAWnC,EAASM,EAAMe,YAMnD,E,uCClEqB2F,EAAa,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,IAAAK,GAAAC,EAAAA,EAAAA,GAAA,KAAAN,GAAA,QAAAO,EAAAC,UAAA7D,OAAA8D,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAG7B,OAH6BN,EAAAF,EAAAS,KAAAC,MAAAV,EAAA,OAAAvD,OAAA6D,KAC9BK,MAAQ,CACJC,OAAO,GACVV,CAAA,CAgBA,OAhBAW,EAAAA,EAAAA,GAAAhB,EAAA,EAAA5B,IAAA,oBAAA6C,MAED,SAAkBF,EAAOG,GACrBC,QAAQC,IAAIL,EAAOG,GAEnBG,KAAKC,SAAS,CACVP,OAAO,GAEf,GAAC,CAAA3C,IAAA,SAAA6C,MAED,WACI,OAAII,KAAKP,MAAMC,OACJ7I,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAGjBoJ,KAAKE,MAAMzI,QACtB,KAACkH,CAAA,CAnB6B,CAAS/G,EAAAA,W,qDC8C3C,EAtCiB,WAEb,IAAAgB,GAAgCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCuH,EAAYrH,EAAA,GAAEG,EAAOH,EAAA,GAM5B,OACIvB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAC6I,EAAAA,EAAM,CAAA3I,SAAA,EACHZ,EAAAA,EAAAA,KAAA,QACIwB,KAAK,cACLgI,QAAQ,+BAEZxJ,EAAAA,EAAAA,KAAA,SAAAY,SAAO,kCAEXZ,EAAAA,EAAAA,KAAC8H,EAAa,CAAAlH,UACVZ,EAAAA,EAAAA,KAACyJ,EAAU,OAEf/I,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeD,SAAA,EAC1BZ,EAAAA,EAAAA,KAAC8H,EAAa,CAAAlH,UACVZ,EAAAA,EAAAA,KAAC0J,EAAQ,CAACtG,eAlBH,SAACT,GACpBP,EAAQO,EACZ,OAkBY3C,EAAAA,EAAAA,KAAC8H,EAAa,CAAAlH,UACVF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeD,SAAA,EAC1BZ,EAAAA,EAAAA,KAAC2J,EAAQ,CAAC9C,OAAQyC,KAClBtJ,EAAAA,EAAAA,KAAC8H,EAAa,CAAAlH,UACVZ,EAAAA,EAAAA,KAAC4J,EAAc,eAK/B5J,EAAAA,EAAAA,KAAA,OAAKa,UAAU,gBAAgBN,IAAKsJ,EAAYpJ,IAAI,aAGhE,C,kGCsCA,EAnFyB,WACrB,IAAMqJ,EAAW,4CACXC,EAAU,0CAGhBC,ECLmB,WACnB,IAAAjI,GAA8BC,EAAAA,EAAAA,UAAS,WAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CjB,EAAOmB,EAAA,GAAEK,EAAUL,EAAA,GAEpBgI,GAAUC,EAAAA,EAAAA,aAAW,eAAA7I,GAAA8I,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,EAAOC,GAAG,IAAAC,EAAAC,EAAAC,EAAAC,EAAA3J,EAAA4J,EAAAtC,UAAA,OAAA8B,EAAAA,EAAAA,KAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACZ,OADcR,EAAMI,EAAAnG,OAAA,QAAAwG,IAAAL,EAAA,GAAAA,EAAA,GAAG,MAAOH,EAAIG,EAAAnG,OAAA,QAAAwG,IAAAL,EAAA,GAAAA,EAAA,GAAG,KAAMF,EAAOE,EAAAnG,OAAA,QAAAwG,IAAAL,EAAA,GAAAA,EAAA,GAAG,CAAC,eAAiB,oBAC7FtI,EAAW,WAAWwI,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGKE,MAAMX,EAAK,CAACC,OAAAA,EAAQC,KAAAA,EAAMC,QAAAA,IAAU,KAAD,EAA5C,IAARC,EAAQG,EAAAK,MAEAC,GAAG,CAADN,EAAAE,KAAA,eACN,IAAI7J,MAAM,mBAADuD,OAAoB6F,EAAG,cAAA7F,OAAaiG,EAAS/B,QAAS,KAAD,UAAAkC,EAAAE,KAAA,GAErDL,EAASU,OAAO,KAAD,GAAxB,GAEuB,KAF3BrK,EAAI8J,EAAAK,MAEDnK,KAAKsK,QAAQ7G,OAAY,CAAAqG,EAAAE,KAAA,SACV,MAApB1I,EAAW,SACL,IAAInB,MAAM,oBAAoB,KAAD,UAAA2J,EAAAS,OAAA,SAGhCvK,GAAI,QAES,MAFT8J,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAEXxI,EAAW,SAASwI,EAAAU,GAAA,yBAAAV,EAAAW,OAAA,GAAAnB,EAAA,mBAK3B,gBAAAoB,GAAA,OAAArK,EAAAsH,MAAA,KAAAL,UAAA,EAvB0B,GAuBxB,IAMH,MAAO,CAACxH,QAAAA,EAASmJ,QAAAA,EAASzH,YAJP0H,EAAAA,EAAAA,cAAY,WAC3B5H,EAAW,UACf,GAAG,IAEmCA,WAAAA,EAC1C,CD5BuEqJ,GAAnD1B,GAAFD,EAAP4B,QAAgB5B,EAAPC,SAAgBnJ,GAAFkJ,EAALnB,MAAcmB,EAAPlJ,SAAS0B,EAAUwH,EAAVxH,WAAYF,EAAU0H,EAAV1H,WAE/C6B,EAAa,eAAA9C,GAAA8I,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOtJ,EAAM6K,GAAK,IAAAhI,EAAAiI,EAAAlB,EAAAtC,UAAA,OAAA8B,EAAAA,EAAAA,KAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAsB,OAApBnH,EAAM+G,EAAAnG,OAAA,QAAAwG,IAAAL,EAAA,GAAAA,EAAA,GAJ5B,IAI0CE,EAAAE,KAAA,EACxCf,EAAQ,GAADvF,OAAIoF,GAAQpF,OAAG1D,EAAI,WAAA0D,OAAUmH,EAAK,YAAAnH,OAAWb,EAAM,KAAAa,OAAIqF,IAAW,KAAD,EAAjF,GAAH+B,EAAGhB,EAAAK,KAEI,eAATnK,EAAqB,CAAA8J,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACRc,EAAI9K,KAAKsK,QAAQ3F,IAAIoG,GAAqB,KAAD,EAGN,KAAD,UAAAjB,EAAAS,OAAA,SAAAT,EAAAK,MAHO,cAAAL,EAAAE,KAAA,GAG7Cc,EAAI9K,KAAKsK,QAAQ3F,IAAIqG,GAAiB,yBAAAlB,EAAAW,OAAA,GAAAnB,EAAA,KACtD,gBARkBoB,EAAAO,GAAA,OAAA5K,EAAAsH,MAAA,KAAAL,UAAA,KAUb/F,EAAmB,eAAA8D,GAAA8D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA6B,EAAOlL,EAAM2B,GAAE,IAAAmJ,EAAA,OAAA1B,EAAAA,EAAAA,KAAAS,MAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,cAAAmB,EAAAnB,KAAA,EACrBf,EAAQ,GAADvF,OAAIoF,GAAQpF,OAAG1D,EAAI,KAAA0D,OAAI/B,EAAE,KAAA+B,OAAIqF,IAAW,KAAD,EAAvD,GAAH+B,EAAGK,EAAAhB,KAEI,eAATnK,EAAqB,CAAAmL,EAAAnB,KAAA,eAAAmB,EAAAZ,OAAA,SACdQ,EAAoBD,EAAI9K,KAAKsK,QAAQ,KAAG,cAAAa,EAAAZ,OAAA,SAG5CS,EAAiBF,EAAI9K,KAAKsK,QAAQ,KAAG,wBAAAa,EAAAV,OAAA,GAAAS,EAAA,KAC/C,gBARwBE,EAAAC,GAAA,OAAAhG,EAAAsC,MAAA,KAAAL,UAAA,KAUnBvB,EAAc,eAAAuF,GAAAnC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAkC,EAAO/K,GAAI,IAAAsK,EAAA,OAAA1B,EAAAA,EAAAA,KAAAS,MAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACZf,EAAQ,GAADvF,OAAIoF,EAAQ,oBAAApF,OAAmBlD,EAAI,KAAAkD,OAAIqF,IAAU,OAAjE,OAAH+B,EAAGU,EAAArB,KAAAqB,EAAAjB,OAAA,SAEFQ,EAAoBD,EAAI9K,KAAKsK,QAAQ,KAAG,wBAAAkB,EAAAf,OAAA,GAAAc,EAAA,KAClD,gBAJmBE,GAAA,OAAAH,EAAA3D,MAAA,KAAAL,UAAA,KAMdyD,EAAsB,SAAC5J,GACzB,IAAIV,EAAcU,EAAKV,YAUvB,OARIA,EAAYgD,QAAU,IACtBhD,EAAc,gDAGdA,EAAYgD,OAAS,MACrBhD,EAAcA,EAAYiL,MAAM,EAAG,KAAO,OAGvC,CACH/J,GAAIR,EAAKQ,GACTnB,KAAMW,EAAKX,KACXC,YAAaA,EACbG,UAAWO,EAAKP,UAAU+K,KAAO,IAAMxK,EAAKP,UAAUgL,UACtDlL,SAAUS,EAAK0K,KAAK,GAAGtC,IACvB5I,KAAMQ,EAAK0K,KAAK,GAAGtC,IACnBjE,OAAQnE,EAAKmE,OAAOZ,MAE5B,EAEMsG,EAAmB,SAAC/G,GACtB,MAAO,CACHtC,GAAIsC,EAAKtC,GACTmK,MAAO7H,EAAK6H,MACZrL,YAAawD,EAAKxD,aAAe,0BACjCsL,UAAW9H,EAAK8H,UAAS,GAAArI,OAAMO,EAAK8H,UAAS,OAAQ,2CACrDC,MAAgC,IAAzB/H,EAAKgI,OAAO,GAAGD,MAAc,gBAAmB/H,EAAKgI,OAAO,GAAGD,MAAQ,IAC9EE,SAAUjI,EAAKkI,YAAYD,UAAY,QACvCtL,UAAWqD,EAAKrD,UAAU+K,KAAO,IAAM1H,EAAKrD,UAAUgL,UACtDrC,IAAKtF,EAAK4H,KAAK,GAAGtC,IAE1B,EAcA,MAAO,CAACzJ,QAAAA,EAASqD,cAAAA,EAAe5B,oBAAAA,EAAqBjB,oBAZzB,SAACqL,GACzB,IAAI9K,EAAa,CACbxB,UAAY,QAOhB,MAJG,wBAAwB+M,KAAKT,KAC5B9K,EAAWxB,UAAY,SAGpBwB,CACX,EAE0EW,WAAAA,EAAYuE,eAAAA,EAAgBzE,WAAAA,EAC1G,C","sources":["components/errorMessage/ErrorMessage.js","components/skeleton/Skeleton.js","utils/setContent.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/searchCharPanel/SearchCharPanel.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import ErrorGif from './error.gif';\n\nexport default function ErrorMessage() {\n    return (\n        <img style={{\n            display: 'block',\n            width: '250px',\n            height: '250px',\n            objectFit: 'contain',\n            margin: '0 auto'\n        }} src={ErrorGif} alt=\"Error Gif\" />\n    )\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import LoadingSpinner from \"../components/spinner/LoadingSpinner\";\nimport Skeleton from \"../components/skeleton/Skeleton\";\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\n\nconst setContent = (process, Component, data) => {\n    switch(process) {\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading':\n            return <LoadingSpinner/>;\n        case 'success':\n            return <Component data={data}/>\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;","import { useEffect } from 'react';\nimport { useState } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const {process, setProcess, getSingleMarvelData, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        \n        clearError();\n        getSingleMarvelData('characters', id)\n            .then(onCharLoaded)\n            .then(() => setProcess('success'));\n    }\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [])\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\"\n                        onClick={updateChar}\n                        >\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {checkAvailableImage} = useMarvelService();\n    const {name, description, homepage, wiki, thumbnail} = data;\n\n    const imageStyle = checkAvailableImage(thumbnail);\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imageStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport LoadingSpinner from '../spinner/LoadingSpinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newLoading) => {\n    switch(process) {\n        case 'waiting':\n            return <LoadingSpinner/>;\n        case 'loading':\n            return newLoading ? <Component/> : <LoadingSpinner/>;\n        case 'success':\n            return <Component/>\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = ({onCharSelected}) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\n    const [offset, setOffset] = useState(215);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {process, setProcess, getMarvelData, checkAvailableImage} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    // useEffect(() => {\n    //     const onScrollRequest = () => {\n    //         if((document.documentElement.clientHeight + window.scrollY) >= document.documentElement.scrollHeight - 1 && !newItemsLoading) {\n    //             onRequest(offset, false);\n    //         }\n    //     }\n    //     console.log('load')\n        \n    //     window.addEventListener('scroll', onScrollRequest);\n        \n    //     return () => {\n    //         window.removeEventListener('scroll', onScrollRequest)\n    //     };\n    // }, [newItemsLoading, offset])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\n\n        getMarvelData('characters', 9, offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('success'));\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setOffset(offset => offset + 9);\n        setNewItemsLoading(false);\n        setCharEnded(ended);\n    }\n\n    const itemsRef = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemsRef.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemsRef.current[id].classList.add('char__item_selected');\n        itemsRef.current[id].focus()\n    }\n\n    const renderItems = (arr) => {\n        const items = arr.map((char, i) => {\n            const {name, thumbnail, id} = char;\n            \n            const imageStyle = checkAvailableImage(thumbnail);\n\n            return (\n                <li key={i}\n                    ref={el => itemsRef.current[i] = el}\n                    tabIndex={0}\n                    className=\"char__item\"\n                    onClick={() => {\n                            onCharSelected(id);\n                            focusOnItem(i)\n                        }}\n                    // onFocus={() => {\n                    //     onCharSelected(id);\n                    // }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            onCharSelected(id);\n                            focusOnItem(i);\n                        }\n                    }}\n                    >\n                    <img src={thumbnail} alt={name} style={imageStyle}/>\n                    <div className=\"char__name\">{name}</div>\n                </li>\n            )\n        })\n\n        return (\n                <ul className=\"char__grid\">\n                        {items}\n                </ul>\n        )\n    }\n\n    const elems = useMemo(() => setContent(process, () => renderItems(charList), newItemsLoading), [charList])\n    \n    return (\n        <div className=\"char__list\">\n                {elems}\n            <button className=\"button button__main button__long\"\n                    disabled={newItemsLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset, false)}>\n                <div className=\"inner\">Load More</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = ({charId}) =>{\n    const [char, setChar] = useState(null);\n\n    const {process, getSingleMarvelData, clearError, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [charId]);\n\n    const updateChar = () => {\n        if (!charId) {\n            return;\n        }\n        clearError();\n        \n        getSingleMarvelData('characters', charId)\n            .then(setChar)\n            .then(() => setProcess('success'));\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    const {checkAvailableImage} = useMarvelService();\n    const imageStyle = checkAvailableImage(thumbnail);\n    const comicsList = comics.map((item, i) => {\n        const urlParts = item.resourceURI.split('/');\n        const id = urlParts[urlParts.length - 1];\n\n        if (i > 9) {\n            return;\n        }\n        return (\n            <li key={i} className=\"char__comics-item\">\n                    <Link to={`/marvel_info/comics/${id}`}>{item.name}</Link>\n            </li>\n        )\n    })\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imageStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comicsList.length === 0 ? 'Comics not found' : comicsList}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Formik, Form, Field, ErrorMessage as FormikError} from \"formik\";\nimport * as Yup from 'yup';\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport './searchCharPanel.scss';\n\nconst setContent = (process, Component, data) => {\n    switch(process) {\n        case 'waiting':\n            return null;\n        case 'loading':\n            return null;\n        case 'success':\n            return <Component data={data} process={process}/>\n        case 'error':\n            return <Component data={data} process={process}/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst FindCharByName = () => {\n    const [char, setChar] = useState(null);\n    const {findCharByName, clearError, process, setProcess} = useMarvelService();\n    \n    const charOnLoad = (name) => {\n        clearError();\n        setChar(char => null)\n\n        findCharByName(name)\n            .then(data => setChar(char => data))\n            .then(() => setProcess('success'));\n\n    }\n\n    return (\n        <Formik\n            initialValues={{\n                name: ''\n            }}\n            validationSchema={Yup.object({\n                name: Yup.string().min(3, 'At least 3 symbols...').required('This field is required')\n            })}\n            onSubmit={values => charOnLoad(values.name)}\n            >\n            <Form>\n                <div className='find__box'>\n                    <div className='find__title'>\n                        Or find a character by name:\n                    </div>\n                    <div className='find__inner-container'>\n                        <Field\n                            name='name'\n                            placeholder='Enter name'\n                            className='find__input'\n                        />\n                        <button type='submit' className='button button__main'disabled={process === 'loading'}>\n                            <div className='inner'>Find</div>\n                        </button>\n                        <FormikError name='name' component='div' className='find__error'/>\n                        {setContent(process, View, char)}\n                    </div>\n                </div>\n            </Form>\n        </Formik>\n    )\n}\n\nconst View = ({data, process}) => {    \n    if (!data || process === 'error') {\n        return (\n            <>\n                <div className='find__error'>The character was not found. Check the name and try again</div>\n            </>\n        )\n    } else {\n        return (\n            <>\n                <div className='find__succes'>{`There is! Visit ${data.name} page?`}</div>\n                <ToPageButton name={data.name}/>\n            </>\n        )\n    }\n}\n\nconst ToPageButton = ({name}) => {\n    return (\n        <Link to={`/marvel_info/characters/${name}`} \n            className='button button__secondary'>\n                    <div className='inner'>To page</div>\n        </Link>\n    )\n}\n\nexport default FindCharByName;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nexport default class ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo)\n\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport FindCharByName from \"../searchCharPanel/SearchCharPanel\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <div className=\"char__section\">\n                        <CharInfo charId={selectedChar}/>\n                        <ErrorBoundary>\n                            <FindCharByName/>\n                        </ErrorBoundary>\n                    </div>\n                </ErrorBoundary>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=df45cf660f835fae11e3961d7b9575b8';\n    const _baseOffset = 215;\n\n    const {loading, request, error, process, clearError, setProcess} = useHttp();\n\n    const getMarvelData = async (data, limit, offset = _baseOffset) => {\n        const res = await request(`${_apiBase}${data}?limit=${limit}&offset=${offset}&${_apiKey}`);\n        \n        if (data === 'characters') {\n            return await res.data.results.map(_transformCharacter);\n        }\n\n        return await res.data.results.map(_transformComics);\n    }\n\n    const getSingleMarvelData = async (data, id) => {\n        const res = await request(`${_apiBase}${data}/${id}?${_apiKey}`);\n        \n        if (data === 'characters') {\n            return _transformCharacter(res.data.results[0]);\n        }\n\n        return _transformComics(res.data.results[0]);\n    }\n\n    const findCharByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\n        \n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        let description = char.description;\n\n        if (description.length <= 0) {\n            description = 'There is no information about this character';\n        }\n\n        if (description.length > 150) {\n            description = description.slice(0, 150) + '...';\n        }\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (item) => {\n        return {\n            id: item.id,\n            title: item.title,\n            description: item.description || \"There is no description\",\n            pageCount: item.pageCount ? `${item.pageCount} p.` : \"No information about the number of pages\", \n            price: item.prices[0].price === 0 ? 'NOT AVAILABLE' : (item.prices[0].price + '$'),\n            language: item.textObjects.language || \"en-us\",\n            thumbnail: item.thumbnail.path + '.' + item.thumbnail.extension,\n            url: item.urls[0].url\n        }\n    }\n\n    const checkAvailableImage = (path) => {\n        let imageStyle = {\n            objectFit : 'fill'\n        };\n\n        if(/image_not_available/gi.test(path)) {\n            imageStyle.objectFit = 'unset';\n        }\n\n        return imageStyle;\n    }\n\n    return {process, getMarvelData, getSingleMarvelData, checkAvailableImage, clearError, findCharByName, setProcess}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type' : 'application/json'}) => {\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.state}`);\n            }\n            const data = await response.json();\n            \n            if (data.data.results.length === 0) {\n                setProcess('error');\n                throw new Error(`No matches found`);\n            }\n\n            return data;\n        } catch (error) {\n            setProcess('error');\n\n            throw error;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, [])\n\n    return {process, request, clearError, setProcess};\n}"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","ErrorGif","alt","_jsxs","_Fragment","children","className","process","Component","data","Skeleton","LoadingSpinner","Error","View","_ref","checkAvailableImage","useMarvelService","name","description","homepage","wiki","thumbnail","imageStyle","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","setProcess","getSingleMarvelData","clearError","onCharLoaded","updateChar","id","Math","floor","random","then","useEffect","setContent","onClick","mjolnir","onCharSelected","charList","setCharList","_useState3","_useState4","newItemsLoading","setNewItemsLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getMarvelData","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemsRef","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elems","useMemo","newLoading","arr","items","map","i","ref","el","tabIndex","onKeyPress","e","key","renderItems","disabled","_ref2","comics","comicsList","urlParts","resourceURI","split","Link","to","charId","ToPageButton","findCharByName","Formik","initialValues","validationSchema","Yup","min","required","onSubmit","values","Form","Field","placeholder","type","FormikError","component","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","error","_createClass","value","errorInfo","console","log","this","setState","props","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","FindCharByName","decoration","_apiBase","_apiKey","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","json","results","abrupt","t0","stop","_x","useHttp","loading","limit","res","_transformCharacter","_transformComics","_x2","_callee2","_context2","_x3","_x4","_ref3","_callee3","_context3","_x5","slice","path","extension","urls","title","pageCount","price","prices","language","textObjects","test"],"sourceRoot":""}