{"version":3,"file":"static/js/682.d553a67e.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ErrorGif from './error.gif';\n\nexport default function ErrorMessage() {\n    return (\n        <img style={{\n            display: 'block',\n            width: '250px',\n            height: '250px',\n            objectFit: 'contain',\n            margin: '0 auto'\n        }} src={ErrorGif} alt=\"Error Gif\" />\n    )\n}","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport LoadingSpinner from \"../spinner/LoadingSpinner\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newLoading) => {\n    switch(process) {\n        case 'waiting':\n            return <LoadingSpinner/>;\n        case 'loading':\n            return newLoading ? <Component/> : <LoadingSpinner/>;\n        case 'success':\n            return <Component/>\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {process, setProcess, getMarvelData} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\n\n        getMarvelData('comics', 8, offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('success'));\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setOffset(offset => offset + 8);\n        setNewItemsLoading(false);\n        setComicsEnded(ended);\n    }\n\n    const renderItems = (arr) => {\n        const items = arr.map((item, i) => {\n            const {title, price, thumbnail, id} = item;\n\n            return (\n                <li key={i} className=\"comics__item\">\n                    <Link to={`/marvel_info/comics/${id}`}>\n                        <img src={thumbnail} alt={title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{title}</div>\n                        <div className=\"comics__item-price\">{price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                    {items}\n                </ul>\n        )\n    }\n\n    return (\n        <>\n            <AppBanner/>\n            <div className=\"comics__list\">\n                    {setContent(process, () => renderItems(comicsList), newItemsLoading)}\n                <button className=\"button button__main button__long\"\n                        disabled={newItemsLoading}\n                        style={{'display': comicsEnded ? 'none' : 'block'}}\n                        onClick={() => onRequest(offset, false)}>\n                    <div className=\"inner\">Load More</div>\n                </button>\n            </div>\n        </>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\n\nimport ComicsList from \"../comicsList/ComicsList\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics page</title>\n            </Helmet>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=df45cf660f835fae11e3961d7b9575b8';\n    const _baseOffset = 215;\n\n    const {loading, request, error, process, clearError, setProcess} = useHttp();\n\n    const getMarvelData = async (data, limit, offset = _baseOffset) => {\n        const res = await request(`${_apiBase}${data}?limit=${limit}&offset=${offset}&${_apiKey}`);\n        \n        if (data === 'characters') {\n            return await res.data.results.map(_transformCharacter);\n        }\n\n        return await res.data.results.map(_transformComics);\n    }\n\n    const getSingleMarvelData = async (data, id) => {\n        const res = await request(`${_apiBase}${data}/${id}?${_apiKey}`);\n        \n        if (data === 'characters') {\n            return _transformCharacter(res.data.results[0]);\n        }\n\n        return _transformComics(res.data.results[0]);\n    }\n\n    const findCharByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\n        \n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        let description = char.description;\n\n        if (description.length <= 0) {\n            description = 'There is no information about this character';\n        }\n\n        if (description.length > 150) {\n            description = description.slice(0, 150) + '...';\n        }\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (item) => {\n        return {\n            id: item.id,\n            title: item.title,\n            description: item.description || \"There is no description\",\n            pageCount: item.pageCount ? `${item.pageCount} p.` : \"No information about the number of pages\", \n            price: item.prices[0].price === 0 ? 'NOT AVAILABLE' : (item.prices[0].price + '$'),\n            language: item.textObjects.language || \"en-us\",\n            thumbnail: item.thumbnail.path + '.' + item.thumbnail.extension,\n            url: item.urls[0].url\n        }\n    }\n\n    const checkAvailableImage = (path) => {\n        let imageStyle = {\n            objectFit : 'fill'\n        };\n\n        if(/image_not_available/gi.test(path)) {\n            imageStyle.objectFit = 'unset';\n        }\n\n        return imageStyle;\n    }\n\n    return {process, getMarvelData, getSingleMarvelData, checkAvailableImage, clearError, findCharByName, setProcess}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type' : 'application/json'}) => {\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.state}`);\n            }\n            const data = await response.json();\n            \n            if (data.data.results.length === 0) {\n                setProcess('error');\n                throw new Error(`No matches found`);\n            }\n\n            return data;\n        } catch (error) {\n            setProcess('error');\n\n            throw error;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, [])\n\n    return {process, request, clearError, setProcess};\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","ErrorGif","setContent","process","Component","newLoading","LoadingSpinner","Error","_useState","useState","_useState2","_slicedToArray","comicsList","setComicsList","_useState3","_useState4","newItemsLoading","setNewItemsLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","comicsEnded","setComicsEnded","_useMarvelService","useMarvelService","setProcess","getMarvelData","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","concat","_toConsumableArray","_Fragment","AppBanner","arr","items","map","item","i","title","price","thumbnail","id","Link","to","renderItems","disabled","onClick","Helmet","name","content","ComicsList","_apiBase","_apiKey","_useHttp","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","undefined","fetch","sent","ok","state","json","results","abrupt","t0","stop","_x","apply","clearError","useHttp","loading","error","limit","res","_transformCharacter","_transformComics","_x2","getSingleMarvelData","_ref2","_callee2","_context2","_x3","_x4","findCharByName","_ref3","_callee3","_context3","_x5","char","description","slice","path","extension","homepage","urls","wiki","comics","pageCount","prices","language","textObjects","checkAvailableImage","imageStyle","test","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}