{"version":3,"file":"static/js/418.597991e1.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/errorGoBackButton/ErrorGobackButton.js","components/pages/SingleItemPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ErrorGif from './error.gif';\n\nexport default function ErrorMessage() {\n    return (\n        <img style={{\n            display: 'block',\n            width: '250px',\n            height: '250px',\n            objectFit: 'contain',\n            margin: '0 auto'\n        }} src={ErrorGif} alt=\"Error Gif\" />\n    )\n}","import { Link, useHistory } from \"react-router-dom\";\n\nconst ErrorGoBackButton = () => {\n    const history = useHistory();\n    \n    if (history.length <= 2) {\n        return (\n            <button className=\"button button__main button__long\">\n                <div className=\"inner\">\n                    <Link to='/marvel_info'>\n                        To main page\n                    </Link>\n                </div>\n            </button>\n        )\n    }\n\n    return (\n        <button className=\"button button__main button__long\">\n            <div className=\"inner\" onClick={() => history.goBack()}>Go Back</div>\n        </button>\n    )\n}\n\nexport default ErrorGoBackButton;","import { useParams, Link, useHistory } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport { Helmet } from \"react-helmet\";\n\nimport useMarvelService from '../../services/MarvelService';\nimport LoadingSpinner from '../spinner/LoadingSpinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport ErrorGoBackButton from \"../errorGoBackButton/ErrorGobackButton\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nimport './singleItemPage.scss';\n\nconst setContent = (process, Component, data) => {\n    switch(process) {\n        case 'waiting':\n            return;\n        case 'loading':\n            return <LoadingSpinner/>;\n        case 'success':\n            return <Component data={data}/>\n        case 'error':\n            return (\n                <>\n                    <ErrorMessage/>\n                    <ErrorGoBackButton/>\n                </>\n            );\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst SingleItemPage = ({id, category}) => {\n    const renderParam = useParams()[id];\n    const [item, setItem] = useState(null);\n    const {process, setProcess, getSingleMarvelData, clearError, findCharByName} = useMarvelService();\n    \n    useEffect(() => {\n        updateItem();\n    }, [renderParam]);\n\n    const updateItem = () => {\n        clearError();\n        \n        if (category === 'characters') {\n            findCharByName(renderParam)\n            .then(setItem)\n            .then(() => setProcess('success'));\n        } else {\n            getSingleMarvelData('comics', renderParam)\n            .then(setItem)\n            .then(() => setProcess('success'));\n        }\n    }\n\n    return (\n        <>\n            {category === 'comic' ? \n                setContent(process, ViewComic, item) : setContent(process, ViewCharacter, item)\n            }\n        </>\n    )\n}\n\nconst ViewComic = ({data}) => {\n    const {title, description, pageCount, language, price, thumbnail} = data;\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content={`Page of ${title}`}\n                />\n                <title>{title}</title>\n            </Helmet>\n            <AppBanner/>\n            <div className=\"single-item\">\n                <img src={thumbnail} alt={title} className=\"single-item__img\"/>\n                <div className=\"single-item__info\">\n                    <h2 className=\"single-item__name\">{title}</h2>\n                    <p className=\"single-item__descr\">{description}</p>\n                    <p className=\"single-item__descr\">{pageCount}</p>\n                    <p className=\"single-item__descr\">Language: {language}</p>\n                    <div className=\"single-item__price\">{price}</div>\n                </div>\n                <Link to='/marvel_info/comics' className=\"single-item__back\">Back to all</Link>\n            </div>\n        </>\n    )\n}\n\nconst ViewCharacter = ({data}) => {\n    const {name, description, thumbnail} = data;\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content={`Page of ${name}`}\n                />\n                <title>{name}</title>\n            </Helmet>\n            <AppBanner/>\n            <div className=\"single-item\">\n                <img src={thumbnail} alt={name} className=\"single-item__img\"/>\n                <div className=\"single-item__info\">\n                    <h2 className=\"single-item__name\">{name}</h2>\n                    <p className=\"single-item__descr\">{description}</p>\n                </div>\n                <Link to='/marvel_info' className=\"single-item__back\">Back to all</Link>\n            </div>\n        </>\n    )\n}\n\nexport default SingleItemPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=df45cf660f835fae11e3961d7b9575b8';\n    const _baseOffset = 215;\n\n    const {loading, request, error, process, clearError, setProcess} = useHttp();\n\n    const getMarvelData = async (data, limit, offset = _baseOffset) => {\n        const res = await request(`${_apiBase}${data}?limit=${limit}&offset=${offset}&${_apiKey}`);\n        \n        if (data === 'characters') {\n            return await res.data.results.map(_transformCharacter);\n        }\n\n        return await res.data.results.map(_transformComics);\n    }\n\n    const getSingleMarvelData = async (data, id) => {\n        const res = await request(`${_apiBase}${data}/${id}?${_apiKey}`);\n        \n        if (data === 'characters') {\n            return _transformCharacter(res.data.results[0]);\n        }\n\n        return _transformComics(res.data.results[0]);\n    }\n\n    const findCharByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\n        \n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        let description = char.description;\n\n        if (description.length <= 0) {\n            description = 'There is no information about this character';\n        }\n\n        if (description.length > 150) {\n            description = description.slice(0, 150) + '...';\n        }\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (item) => {\n        return {\n            id: item.id,\n            title: item.title,\n            description: item.description || \"There is no description\",\n            pageCount: item.pageCount ? `${item.pageCount} p.` : \"No information about the number of pages\", \n            price: item.prices[0].price === 0 ? 'NOT AVAILABLE' : (item.prices[0].price + '$'),\n            language: item.textObjects.language || \"en-us\",\n            thumbnail: item.thumbnail.path + '.' + item.thumbnail.extension,\n            url: item.urls[0].url\n        }\n    }\n\n    const checkAvailableImage = (path) => {\n        let imageStyle = {\n            objectFit : 'fill'\n        };\n\n        if(/image_not_available/gi.test(path)) {\n            imageStyle.objectFit = 'unset';\n        }\n\n        return imageStyle;\n    }\n\n    return {process, getMarvelData, getSingleMarvelData, checkAvailableImage, clearError, findCharByName, setProcess}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type' : 'application/json'}) => {\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.state}`);\n            }\n            const data = await response.json();\n            \n            if (data.data.results.length === 0) {\n                setProcess('error');\n                throw new Error(`No matches found`);\n            }\n\n            return data;\n        } catch (error) {\n            setProcess('error');\n\n            throw error;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, [])\n\n    return {process, request, clearError, setProcess};\n}"],"names":["_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","ErrorGif","history","useHistory","length","Link","to","onClick","goBack","setContent","process","Component","data","LoadingSpinner","_Fragment","ErrorGoBackButton","Error","ViewComic","_ref2","title","description","pageCount","language","price","thumbnail","Helmet","name","content","concat","AppBanner","ViewCharacter","_ref3","_ref","id","category","renderParam","useParams","_useState","useState","_useState2","_slicedToArray","item","setItem","_useMarvelService","useMarvelService","setProcess","getSingleMarvelData","clearError","findCharByName","useEffect","updateItem","then","_apiBase","_apiKey","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","arguments","wrap","_context","prev","next","undefined","fetch","sent","ok","state","json","results","abrupt","t0","stop","_x","apply","useHttp","loading","error","getMarvelData","limit","offset","res","map","_transformCharacter","_transformComics","_x2","_callee2","_context2","_x3","_x4","_callee3","_context3","_x5","char","slice","path","extension","homepage","urls","wiki","comics","items","prices","textObjects","checkAvailableImage","imageStyle","test"],"sourceRoot":""}